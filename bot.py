import re
import logging
import aiohttp
import asyncio
import os
from urllib.parse import quote
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from aiogram.filters import Command
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(level=logging.INFO)

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
AUTO_DELETE_DELAY_RAW = os.getenv("AUTO_DELETE_DELAY", "0")

try:
    AUTO_DELETE_DELAY = int(AUTO_DELETE_DELAY_RAW)
    if AUTO_DELETE_DELAY < 0:
        raise ValueError
except (TypeError, ValueError):
    logging.warning(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ AUTO_DELETE_DELAY='%s'. –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.",
        AUTO_DELETE_DELAY_RAW,
    )
    AUTO_DELETE_DELAY = 0
else:
    if AUTO_DELETE_DELAY > 0:
        logging.info(
            "üïí –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ. –ó–∞–¥–µ—Ä–∂–∫–∞: %s —Å–µ–∫—É–Ω–¥.",
            AUTO_DELETE_DELAY,
        )

if not TELEGRAM_TOKEN or not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

# === –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# === /help ===
@dp.message(Command("help"))
@dp.message(F.text.lower().startswith("/help"))
async def send_help(message: types.Message):
    text = (
        "üéß <b>Spotify Info Bot</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö Spotify –∏ –Ω–∞–π—Ç–∏ –∏—Ö –≤ –¥—Ä—É–≥–∏—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.\n\n"
        "üìå <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify ‚Äî —è –ø–æ–∫–∞–∂—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–ª—å–±–æ–º.\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ inline-—Ä–µ–∂–∏–º–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ <code>@–∏–º—è_–±–æ—Ç–∞</code> –∏ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫.\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Spotify –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ <code>spotify.link</code>.\n\n"
        "üéµ –í –∫–∞—Ä—Ç–æ—á–∫–µ —Ç—Ä–µ–∫–∞ —Ç—ã –Ω–∞–π–¥—ë—à—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ Spotify, YouTube Music, Apple Music, "
        "–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É, SoundCloud –∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
        "üìñ <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>https://open.spotify.com/track/xxxxxxxxxxxxxxxx</code>"
    )
    await message.answer(text, parse_mode="HTML")

# === Spotify Auth ===
async def get_spotify_token():
    url = "https://accounts.spotify.com/api/token"
    data = {"grant_type": "client_credentials"}
    async with aiohttp.ClientSession() as session:
        async with session.post(
            url, data=data, auth=aiohttp.BasicAuth(SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)
        ) as resp:
            token_data = await resp.json()
            return token_data.get("access_token")

# === –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–∫–∞ ===
def extract_track_id(spotify_url: str):
    match = re.search(r"track/([A-Za-z0-9]+)", spotify_url)
    return match.group(1) if match else None

# === –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ ===
async def resolve_spotify_link(short_url: str) -> str:
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(short_url, allow_redirects=True) as resp:
                return str(resp.url)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            return None

# === –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ ===
async def get_track_info(track_id: str):
    token = await get_spotify_token()
    headers = {"Authorization": f"Bearer {token}"}

    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.spotify.com/v1/tracks/{track_id}", headers=headers) as resp:
            if resp.status != 200:
                return None
            data = await resp.json()

            artist_names = ", ".join(artist["name"] for artist in data["artists"])
            track_name = data["name"]
            album_data = data["album"]
            album_name = album_data["name"]
            album_id = album_data["id"]
            image_url = album_data["images"][0]["url"] if album_data.get("images") else None
            release_date = album_data.get("release_date", "Unknown Date")

        # –ü–æ–ª—É—á–∞–µ–º –ª–µ–π–±–ª
        async with session.get(f"https://api.spotify.com/v1/albums/{album_id}", headers=headers) as album_resp:
            if album_resp.status == 200:
                album_json = await album_resp.json()
                label = album_json.get("label", "Unknown Label")
            else:
                label = "Unknown Label"

        return {
            "artist": artist_names,
            "track": track_name,
            "album": album_name,
            "image": image_url,
            "label": label,
            "release_date": release_date,
        }

# === –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ===
async def search_spotify_tracks(query: str):
    token = await get_spotify_token()
    if not token:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Spotify token –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return []

    headers = {"Authorization": f"Bearer {token}"}
    params = {"q": query, "type": "track", "limit": 5}

    async with aiohttp.ClientSession() as session:
        async with session.get(
            "https://api.spotify.com/v1/search", headers=headers, params=params
        ) as resp:
            if resp.status != 200:
                txt = await resp.text()
                logging.warning(f"Spotify search error: {resp.status} {txt}")
                return []
            data = await resp.json()
            return data.get("tracks", {}).get("items", []) or []

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def generate_keyboard(track, artist, spotify_url):
    query_encoded = quote(f"{track} {artist}")
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéß Spotify", url=spotify_url)],
            [
                InlineKeyboardButton(text="üéµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url="https://vk.com/audio"),
                InlineKeyboardButton(text="üé∂ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞", url=f"https://music.yandex.ru/search?text={query_encoded}"),
            ],
            [
                InlineKeyboardButton(text="‚òÅÔ∏è SoundCloud", url=f"https://soundcloud.com/search?q={query_encoded}"),
                InlineKeyboardButton(text="üçé Apple Music", url=f"https://music.apple.com/search?term={query_encoded}"),
            ],
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è YouTube", url=f"https://www.youtube.com/results?search_query={query_encoded}"),
                InlineKeyboardButton(text="üéµ YouTube Music", url=f"https://music.youtube.com/search?q={query_encoded}")
            ]
        ]
    )

# === –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def should_auto_delete(chat: types.Chat) -> bool:
    return AUTO_DELETE_DELAY > 0 and chat.type in {"group", "supergroup"}

async def auto_delete_messages(delay: int, messages: list[types.Message]):
    await asyncio.sleep(delay)
    for msg in messages:
        try:
            await msg.delete()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ ===
@dp.message()
async def handle_spotify_link(message: types.Message):
    if not message.text:
        return

    url = message.text.strip()

    if "spotify.link/" in url:
        url = await resolve_spotify_link(url)
        if not url:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–∫—Ä—ã—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É üòï")
            return

    if "open.spotify.com/track/" not in url:
        return

    track_id = extract_track_id(url)
    if not track_id:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É üòï")
        return

    track_info = await get_track_info(track_id)
    if not track_info:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ üò¢")
        return

    artist = track_info["artist"]
    track = track_info["track"]
    album = track_info["album"]
    image_url = track_info["image"]
    label = track_info["label"]
    release_date = track_info["release_date"]

    caption = (
        f"`{artist} ‚Äî {track}`\n"
        f"***{album}***\n\n"
        f"Release date: {release_date}\n"
        f"Label: {label}"
    )

    keyboard = generate_keyboard(track, artist, url)

    if image_url:
        sent_message = await bot.send_photo(
            chat_id=message.chat.id,
            photo=image_url,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )
    else:
        sent_message = await bot.send_message(
            chat_id=message.chat.id,
            text=caption,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

    if should_auto_delete(message.chat) and sent_message:
        asyncio.create_task(auto_delete_messages(AUTO_DELETE_DELAY, [message]))

# === Inline-—Ä–µ–∂–∏–º ===
@dp.inline_query()
async def inline_handler(query: InlineQuery):
    text = query.query.strip()
    if not text:
        return

    results: list[InlineQueryResultArticle] = []

    if "spotify.link/" in text or "open.spotify.com/track/" in text:
        if "spotify.link/" in text:
            text = await resolve_spotify_link(text)
            if not text:
                return

        track_id = extract_track_id(text)
        if not track_id:
            return

        track_info = await get_track_info(track_id)
        if not track_info:
            return

        artist = track_info["artist"]
        track = track_info["track"]
        album = track_info["album"]
        image_url = track_info["image"]
        label = track_info["label"]
        release_date = track_info["release_date"]

        caption = (
            f"`{artist} ‚Äî {track}`\n"
            f"***{album}***\n\n"
            f"Release date: {release_date}\n"
            f"Label: {label}"
        )

        keyboard = generate_keyboard(track, artist, text)
        results.append(
            InlineQueryResultArticle(
                id=track_id,
                title=f"{artist} ‚Äî {track}",
                description=album,
                thumb_url=image_url,
                input_message_content=InputTextMessageContent(
                    message_text=caption, parse_mode="Markdown"
                ),
                reply_markup=keyboard,
            )
        )
    else:
        items = await search_spotify_tracks(text)
        if not items:
            await query.answer([], cache_time=1, is_personal=True)
            return

        for item in items:
            track_id = item.get("id")
            track = item.get("name", "Unknown")
            artist = ", ".join(a["name"] for a in item.get("artists", [])) or "Unknown"
            album = item.get("album", {}).get("name", "")
            images = item.get("album", {}).get("images", [])
            image_url = images[0]["url"] if images else None
            spotify_url = item.get("external_urls", {}).get("spotify", "")
            label = item.get("album", {}).get("label", "Unknown Label")
            release_date = item.get("album", {}).get("release_date", "Unknown Date")

            caption = (
                f"`{artist} ‚Äî {track}`\n"
                f"***{album}***\n\n"
                f"Release date: {release_date}\n"
                f"Label: {label}"
            )

            keyboard = generate_keyboard(track, artist, spotify_url)

            results.append(
                InlineQueryResultArticle(
                    id=track_id or f"{artist}-{track}",
                    title=f"{artist} ‚Äî {track}",
                    description=album,
                    thumb_url=image_url,
                    input_message_content=InputTextMessageContent(
                        message_text=caption, parse_mode="Markdown"
                    ),
                    reply_markup=keyboard,
                )
            )

    await query.answer(results, cache_time=1, is_personal=True)

# === –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ ===
async def on_startup():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–≤–∫–ª—é—á–∞—è inline-—Ä–µ–∂–∏–º)")

dp.startup.register(on_startup)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logging.error(f"–ë–æ—Ç —É–ø–∞–ª: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())
