import re
import logging
import aiohttp
import asyncio
import os
from urllib.parse import quote
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from aiogram.filters import Command
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(level=logging.INFO)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")


def _get_auto_delete_delay() -> int:
    value = os.getenv("AUTO_DELETE_DELAY")
    if not value:
        return 0
    try:
        delay = int(value)
        if delay < 0:
            raise ValueError
        return delay
    except ValueError:
        logging.warning(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ AUTO_DELETE_DELAY=%s ‚Äî –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.",
            value,
        )
        return 0


AUTO_DELETE_DELAY = _get_auto_delete_delay()

if AUTO_DELETE_DELAY:
    logging.info(
        "–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –≤–∫–ª—é—á–µ–Ω–æ (—á–µ—Ä–µ–∑ %s —Å–µ–∫—É–Ω–¥)",
        AUTO_DELETE_DELAY,
    )

if not TELEGRAM_TOKEN or not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

# === –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


def should_auto_delete(chat: types.Chat) -> bool:
    return AUTO_DELETE_DELAY > 0 and chat and chat.type in {"group", "supergroup"}


async def delete_message_later(chat_id: int, message_id: int):
    await asyncio.sleep(AUTO_DELETE_DELAY)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logging.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s –≤ —á–∞—Ç–µ %s: %s",
            message_id,
            chat_id,
            e,
        )

# === /help ===
@dp.message(Command("help"))
@dp.message(F.text.lower().startswith("/help"))
async def send_help(message: types.Message):
    text = (
        "üéß <b>Spotify Info Bot</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö Spotify.\n\n"
        "üìå <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify ‚Äî —è –ø–æ–∫–∞–∂—É –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ–±–ª–æ–∂–∫—É.\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞—é –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –≤ –ª–∏—á–∫–µ.\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤ inline-—Ä–µ–∂–∏–º–µ: –Ω–∞–ø–∏—à–∏ <code>@–∏–º—è_–±–æ—Ç–∞</code> –∏ –Ω–∞—á–Ω–∏ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>https://open.spotify.com/track/xxxxxxxx</code>"
    )
    await message.answer(text, parse_mode="HTML")

# === –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Spotify ===
async def get_spotify_token():
    url = "https://accounts.spotify.com/api/token"
    data = {"grant_type": "client_credentials"}
    async with aiohttp.ClientSession() as session:
        async with session.post(
            url, data=data, auth=aiohttp.BasicAuth(SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)
        ) as resp:
            token_data = await resp.json()
            return token_data.get("access_token")

# === –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ ===
def extract_track_id(spotify_url: str):
    match = re.search(r"track/([A-Za-z0-9]+)", spotify_url)
    return match.group(1) if match else None

# === –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ Spotify ===
async def resolve_spotify_link(short_url: str) -> str:
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(short_url, allow_redirects=True) as resp:
                return str(resp.url)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏: {e}")
            return None

# === –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ ===
async def get_track_info(track_id: str):
    token = await get_spotify_token()
    headers = {"Authorization": f"Bearer {token}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.spotify.com/v1/tracks/{track_id}", headers=headers) as resp:
            if resp.status != 200:
                return None
            data = await resp.json()
            artist_names = ", ".join(artist["name"] for artist in data["artists"])
            track_name = data["name"]
            album_name = data["album"]["name"]
            image_url = data["album"]["images"][0]["url"] if data["album"]["images"] else None
            return {"artist": artist_names, "track": track_name, "album": album_name, "image": image_url}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ ===
def generate_keyboard(track, artist, spotify_url):
    query_encoded = quote(f"{track} {artist}")
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéß Spotify", url=spotify_url)
            ],
            [
                InlineKeyboardButton(text="üéµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url="https://vk.com/audio"),
                InlineKeyboardButton(text="üé∂ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞", url=f"https://music.yandex.ru/search?text={query_encoded}"),
            ],
            [
                InlineKeyboardButton(text="‚òÅÔ∏è SoundCloud", url=f"https://soundcloud.com/search?q={query_encoded}"),
                InlineKeyboardButton(text="üçé Apple Music", url=f"https://music.apple.com/search?term={query_encoded}"),
            ],
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è YouTube", url=f"https://www.youtube.com/results?search_query={query_encoded}"),
                InlineKeyboardButton(text="üéµ YouTube Music", url=f"https://music.youtube.com/search?q={query_encoded}")
            ]
        ]
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ ===
@dp.message()
async def handle_spotify_link(message: types.Message):
    if not message.text:
        return

    url = message.text.strip()
    if "spotify.link/" in url:
        url = await resolve_spotify_link(url)
        if not url:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–∫—Ä—ã—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É üòï")
            return

    if "open.spotify.com/track/" not in url:
        return

    track_id = extract_track_id(url)
    if not track_id:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É üòï")
        return

    track_info = await get_track_info(track_id)
    if not track_info:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ üò¢")
        return

    artist = track_info["artist"]
    track = track_info["track"]
    album = track_info["album"]
    image_url = track_info["image"]

    caption = f"`{artist} ‚Äî {track}`\n***{album}***"
    keyboard = generate_keyboard(track, artist, url)

    if image_url:
        sent_message = await message.reply_photo(
            photo=image_url,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )
    else:
        sent_message = await message.reply(
            caption,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )

    if should_auto_delete(message.chat):
        asyncio.create_task(delete_message_later(message.chat.id, message.message_id))
        asyncio.create_task(delete_message_later(sent_message.chat.id, sent_message.message_id))

# === Inline-—Ä–µ–∂–∏–º ===
@dp.inline_query()
async def inline_handler(query: InlineQuery):
    text = query.query.strip()
    if not text:
        return

    if "spotify.link/" in text:
        text = await resolve_spotify_link(text)
        if not text:
            return

    if "open.spotify.com/track/" not in text:
        return

    track_id = extract_track_id(text)
    if not track_id:
        return

    track_info = await get_track_info(track_id)
    if not track_info:
        return

    artist = track_info["artist"]
    track = track_info["track"]
    album = track_info["album"]
    image_url = track_info["image"]

    caption = f"`{artist} ‚Äî {track}`\n***{album}***"
    keyboard = generate_keyboard(track, artist, text)

    result = InlineQueryResultArticle(
        id=track_id,
        title=f"{artist} ‚Äî {track}",
        description=album,
        thumb_url=image_url,
        input_message_content=InputTextMessageContent(
            message_text=caption,
            parse_mode="Markdown"
        ),
        reply_markup=keyboard
    )

    await query.answer([result], cache_time=1, is_personal=True)

# === –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ ===
async def on_startup():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–≤–∫–ª—é—á–∞—è inline-—Ä–µ–∂–∏–º)")
    dp.startup.register(on_startup)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logging.error(f"–ë–æ—Ç —É–ø–∞–ª: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())
